package com.pgtest
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.apache.spark.sql.SQLContext
object Testing {
  
  
    val conf = new SparkConf().setMaster("local[4]").setAppName("my app")
    val sc = new SparkContext(conf);
 val sparksql = new SQLContext(sc)
 
 
  def main(args : Array[String]){
   val dimedwsource = sparksql.read
      .format("com.databricks.spark.csv")
      .option("header", "true") 
      .option("mode", "DROPMALFORMED")
      .load("C:/dim/DimEDWSource.csv");
 
 dimedwsource.registerTempTable("dimedwsource")
 
 
  
 val denorm_as_with_demo_columnstore_as = sparksql.read
      .format("com.databricks.spark.csv")
      .option("header", "true") 
      .option("mode", "DROPMALFORMED")
      .load("C:/dim/denorm_as_with_demo_columnstore_as.csv");
 
 denorm_as_with_demo_columnstore_as.registerTempTable("denorm_as_with_demo_columnstore_as")
 
 
 val DimCustomItemGroup = sparksql.read
      .format("com.databricks.spark.csv")
      .option("header", "true") 
      .option("mode", "DROPMALFORMED")
      .load("C:/dim/DimCustomItemGroup.csv");
 
 DimCustomItemGroup.registerTempTable("DimCustomItemGroup")
 
 val FactSurveyResponsePXDemographic = sparksql.read
      .format("com.databricks.spark.csv")
      .option("header", "true") 
      .option("mode", "DROPMALFORMED")
      .load("C:/dim/FactSurveyResponsePXDemographic.csv");
 
 FactSurveyResponsePXDemographic.registerTempTable("FactSurveyResponsePXDemographic")
 
 
 val DimSurveyItem = sparksql.read
      .format("com.databricks.spark.csv")
      .option("header", "true") 
      .option("mode", "DROPMALFORMED")
      .load("C:/dim/DimSurveyItem.csv");
 
 DimSurveyItem.registerTempTable("DimSurveyItem")

 val lkpSurveyItemCAHPSPhoneCalibration = sparksql.read
      .format("com.databricks.spark.csv")
      .option("header", "true") 
      .option("mode", "DROPMALFORMED")
      .load("C:/dim/lkpSurveyItemCAHPSPhoneCalibration.csv");
 
 lkpSurveyItemCAHPSPhoneCalibration.registerTempTable("lkpSurveyItemCAHPSPhoneCalibration")
 
   
   dimedwsource.collect().foreach(println)
}
 
}